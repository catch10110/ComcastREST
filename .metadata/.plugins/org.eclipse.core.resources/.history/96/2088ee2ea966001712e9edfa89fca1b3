package org.comcast.ad.service;

import static org.junit.Assert.fail;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.TimeUnit;

import org.comcast.ad.database.DatabaseClass;
import org.comcast.ad.exception.DataNotFoundException;
import org.comcast.ad.model.CampaignModel;
import org.comcast.ad.model.PartnerAdModel;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class AdServiceTest {

	public Map<String, Queue<CampaignModel>> mockCampaignDB = DatabaseClass.CampaignMap;
	
	@Before
	public void setup() {
		DatabaseClass.CampaignMap = new HashMap<>();
	}

	@Test
	public void testGetAllAds() {
		AdService adService = new AdService();
		
		fail("Not yet implemented");
	}

	@Test
	public void testGetAllAdsByPartner_UserDoesNotExist() {
		AdService adService = new AdService();
		
		try {
			adService.getAllAdsByPartner("1");
			fail("Expected a DataNotFoundException.");
		} catch (DataNotFoundException e) {
			Assert.assertEquals("Ad campaign with partner id [1] was not found.", e.getMessage());
		}
	}

	@Test
	public void testGetAllAdsByPartner_UserCampaignsHaveExpired() throws Exception {
		AdService adService = new AdService();
		
		PartnerAdModel partnerAdModel1 = new PartnerAdModel("1", 1, "TestContent");
		CampaignModel model1 = new CampaignModel(partnerAdModel1);
		Queue<CampaignModel> q = new LinkedList<>();
		q.add(model1);
		DatabaseClass.CampaignMap.put("1", q);
		
		TimeUnit.SECONDS.sleep(1);
		
		try {
			adService.getCurrentAdByPartnerId("1");
			fail("Expected a DataNotFoundException.");
		} catch (DataNotFoundException e) {
			Assert.assertEquals("Ad campaign with partner id [1] does not contain any active campaigns.", e.getMessage());
		}
	}
	
	@Test
	public void testGetCurrentAdByPartnerId_UserDoesNotExist() throws Exception {
		AdService adService = new AdService();
		
		try {
			adService.getCurrentAdByPartnerId("1");
			fail("Expected a DataNotFoundException.");
		} catch (DataNotFoundException e) {
			Assert.assertEquals("Ad campaign with partner id [1] was not found.", e.getMessage());
		}
	}
	
	@Test
	public void testGetCurrentAdByPartnerId_UserCampaignsHaveExpired() throws Exception {
		AdService adService = new AdService();
		
		PartnerAdModel partnerAdModel1 = new PartnerAdModel("1", 1, "TestContent");
		CampaignModel model1 = new CampaignModel(partnerAdModel1);
		Queue<CampaignModel> q = new LinkedList<>();
		q.add(model1);
		DatabaseClass.CampaignMap.put("1", q);
		
		TimeUnit.SECONDS.sleep(1);
		
		try {
			adService.getCurrentAdByPartnerId("1");
			fail("Expected a DataNotFoundException.");
		} catch (DataNotFoundException e) {
			Assert.assertEquals("Ad campaign with partner id [1] does not contain any active campaigns.", e.getMessage());
		}
	}
	
	@Test
	public void testGetCurrentAdByPartnerId_RetrieveCurrentAdCampaign() {
		AdService adService = new AdService();
		
		PartnerAdModel partnerAdModel1 = new PartnerAdModel("1", 1, "TestContent");
		CampaignModel model1 = new CampaignModel(partnerAdModel1);
		Queue<CampaignModel> q = new LinkedList<>();
		q.add(model1);
		DatabaseClass.CampaignMap.put("1", q);
		
		
		CampaignModel campaignModel = adService.getCurrentAdByPartnerId("1");
		Assert.assertEquals("1", campaignModel.getPartnerId());
		Assert.assertTrue(LocalDateTime.now().isBefore(campaignModel.getExpiration()));
		Assert.assertEquals("TestContent", campaignModel.getAdContent());
	}
	
	@Test
	public void testGetCurrentAdByPartnerId_RetrieveCurrentAdCampaignAfterFirstExpires() throws Exception {
		AdService adService = new AdService();
		PartnerAdModel partnerAdModel1 = new PartnerAdModel("1", 1, "TestContent");
		CampaignModel model1 = new CampaignModel(partnerAdModel1);
		PartnerAdModel partnerAdModel2 = new PartnerAdModel("1", 2, "Test2");
		CampaignModel model2 = new CampaignModel(partnerAdModel2);
		Queue<CampaignModel> q = new LinkedList<>();
		q.add(model1);
		q.add(model2);
		DatabaseClass.CampaignMap.put("1", q);
		

		TimeUnit.SECONDS.sleep(1);
		
		CampaignModel campaignModel = adService.getCurrentAdByPartnerId("1");
		Assert.assertEquals("1", campaignModel.getPartnerId());
		Assert.assertTrue(LocalDateTime.now().isBefore(campaignModel.getExpiration()));
		Assert.assertEquals("Test2", campaignModel.getAdContent());
	}
	
	@Test
	public void testGetCurrentAdByPartnerId() throws Exception {
		AdService adService = new AdService();
		PartnerAdModel partnerAdModel1 = new PartnerAdModel("1", 1, "TestContent");
		CampaignModel model1 = new CampaignModel(partnerAdModel1);
		PartnerAdModel partnerAdModel2 = new PartnerAdModel("1", 2, "");
		CampaignModel model2 = new CampaignModel(partnerAdModel2);
		Queue<CampaignModel> q = new LinkedList<>();
		q.add(model1);
		q.add(model2);
		DatabaseClass.CampaignMap.put("1", q);
		
		
		
		Assert.assertEquals("1", adService.getCurrentAdByPartnerId("1").getPartnerId());
		Assert.assertEquals("TestContent", adService.getCurrentAdByPartnerId("1").getAdContent());

		TimeUnit.SECONDS.sleep(1);
		
		Assert.assertEquals("1", adService.getCurrentAdByPartnerId("1").getPartnerId());
		Assert.assertEquals("", adService.getCurrentAdByPartnerId("1").getAdContent());

		TimeUnit.SECONDS.sleep(2);
		
		try {
			adService.getCurrentAdByPartnerId("1");
			fail("Expected a DataNotFoundException.");
		} catch (DataNotFoundException e) {
			Assert.assertEquals("Ad campaign with partner id [1] does not contain any active campaigns.", e.getMessage());
		}
	}

}
