package org.comcast.ad.service;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Random;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.comcast.ad.model.PartnerAdModel;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class AdServiceHelper {

	public static final HttpClient httpClient = HttpClientBuilder.create().build();
	public static final String url_base = "http://localhost:8080/ad/ad/";
	public static final String jsonType = "application/json";
	public static URIBuilder uriBuilder;
	
	public static HttpResponse createAd() throws Exception {
		PartnerAdModel ad = new PartnerAdModel("1", 1, "Test");
		StringEntity input = new StringEntity(ConvertPojoToJson(ad));
		
		HttpPost postRequest = new HttpPost(url_base);
		postRequest.setHeader("Content-type", jsonType);
		postRequest.setEntity(input);

		return httpClient.execute(postRequest);
	}
	
	public static HttpResponse createAd(String partnerId, long duration, String adContent) throws Exception {
		PartnerAdModel ad = new PartnerAdModel(partnerId, duration, adContent);
		StringEntity input = new StringEntity(ConvertPojoToJson(ad));
		
		HttpPost postRequest = new HttpPost(url_base);
		postRequest.setHeader("Content-type", jsonType);
		postRequest.setEntity(input);

		return httpClient.execute(postRequest);
	}
	
	public static HttpResponse createAd(String partnerId, long duration) throws Exception {
		PartnerAdModel ad = new PartnerAdModel(partnerId, duration, "Random_String_generator()");
		StringEntity input = new StringEntity(ConvertPojoToJson(ad));
		
		HttpPost postRequest = new HttpPost(url_base);
		postRequest.setHeader("Content-type", jsonType);
		postRequest.setEntity(input);

		return httpClient.execute(postRequest);
	}
	
	public static HttpResponse createAd(String partnerId, String adContent) throws Exception {
		Random rand = new Random();
		PartnerAdModel ad = new PartnerAdModel(partnerId, rand.nextInt(1000), "Random_String_generator()");
		StringEntity input = new StringEntity(ConvertPojoToJson(ad));
		
		HttpPost postRequest = new HttpPost(url_base);
		postRequest.setHeader("Content-type", jsonType);
		postRequest.setEntity(input);

		return httpClient.execute(postRequest);
	}
	
	public static HttpResponse createAd(String partnerId) throws Exception {
		Random rand = new Random();
		PartnerAdModel ad = new PartnerAdModel(partnerId, rand.nextInt(1000), "Random_String_generator()");
		StringEntity input = new StringEntity(ConvertPojoToJson(ad));
		
		HttpPost postRequest = new HttpPost(url_base);
		postRequest.setHeader("Content-type", jsonType);
		postRequest.setEntity(input);

		return httpClient.execute(postRequest);
	}
	

	
	public static HttpResponse getAllCurrentCampaigns() throws ClientProtocolException, IOException {
		HttpGet getRequest = new HttpGet(url_base);
		getRequest.setHeader("accept", jsonType);
		HttpResponse response = httpClient.execute(getRequest);
		return response;
	}
	
	public static HttpResponse getCurrentCampaignById(String partnerId, Boolean returnAll) throws ClientProtocolException, IOException, URISyntaxException {
		uriBuilder = new URIBuilder(url_base + partnerId); 
		uriBuilder.addParameter("all", returnAll.toString());
		HttpGet getRequest = new HttpGet(uriBuilder.build());
		getRequest.setHeader("accept", jsonType);
		
		HttpResponse response = httpClient.execute(getRequest);
		return response;
	}
	
	public static String ConvertPojoToJson(Object o) throws JsonProcessingException {
		ObjectMapper mapper = new ObjectMapper();
		return mapper.writeValueAsString(o);
	}
	
	public static <T> T ConvertJsonToPojo(String json, Class<T> cls) throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		return mapper.readValue(json, cls);
	}
}
