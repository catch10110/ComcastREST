package org.comcast.ad.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

import org.comcast.ad.database.DatabaseClass;
import org.comcast.ad.exception.DataNotFoundException;
import org.comcast.ad.exception.InvalidInputException;
import org.comcast.ad.model.CampaignModel;
import org.comcast.ad.model.PartnerAdModel;

public class AdService {

	private Map<String, Queue<CampaignModel>> campaignDB = DatabaseClass.getCampaignMap();
	
	public AdService() {
		;
	}
	
	public List<CampaignModel> getAllAds() {
		List<Queue<CampaignModel>> campaignList = new ArrayList<>(campaignDB.values());
		List<CampaignModel> campaignResultList = new ArrayList<>();
		
		removeExpiredCampaigns();
		
		for (Queue<CampaignModel> q : campaignList) {
			List<CampaignModel> list = new ArrayList<>(q);
			for (CampaignModel campaign : list) {
				campaignResultList.add(campaign);
			}
		}
		
		return campaignResultList;
	}
	
	public List<CampaignModel> getAllAdsByPartner(String partnerId) {
		List<CampaignModel> campaignResultList = new ArrayList<>();
		
		removeExpiredCampaigns(partnerId);
		
		if (campaignDB.get(partnerId) == null) {
			throw new DataNotFoundException("Ad campaign with partner id [" + partnerId + "] was not found.");
		}	else if (campaignDB.get(partnerId && campaignDB.get(partnerId).size() == 0) != null) {
			throw new DataNotFoundException("Ad campaign with partner id [" + partnerId + "] does not contain any active campaigns.");
		}
		
		Queue<CampaignModel> q = campaignDB.get(partnerId);
		List<CampaignModel> list = new ArrayList<>(q);
		
		for (CampaignModel campaign : list) {
			campaignResultList.add(campaign);
		}
		
		return campaignResultList;
	}
	
	public CampaignModel getCurrentAdByPartnerId(String partnerId) throws DataNotFoundException {
		removeExpiredCampaigns(partnerId);
			
		if (campaignDB.get(partnerId) == null) {
			throw new DataNotFoundException("Ad campaign with partner id [" + partnerId + "] was not found.");
		} else if (campaignDB.get(partnerId) != null && campaignDB.get(partnerId).size() == 0) {
			throw new DataNotFoundException("Ad campaign with partner id [" + partnerId + "] does not contain any active campaigns.");
		}
		
		return campaignDB.get(partnerId).peek();
	}
	
	public PartnerAdModel addAd(PartnerAdModel ad) throws InvalidInputException {
		// Some rudimentary input checking.  Can expand.
		if (ad.getPartnerId().equals("")) {
			throw new InvalidInputException("The partner ID cannot be empty.");
		}
		if (ad.getDuration() <= 0) {
			throw new InvalidInputException("The duration cannot be <= 0");
		}
		if (ad.getAdContent().equals("")) {
			throw new InvalidInputException("The ad content cannot be empty.");
		}
		
		if (ad.getDuration() > 0) {
			CampaignModel campaign = new CampaignModel(ad);
			if (campaignDB.containsKey(campaign.getPartnerId())) {
				campaignDB.get(campaign.getPartnerId()).add(campaign);
			} else {
				Queue<CampaignModel> q = new LinkedList<>();
				q.add(campaign);
				campaignDB.put(campaign.getPartnerId(), q);
			}
		}
		return ad;
	}
	
	/**
	 * Checks to see if the current partner has any valid ad campaigns.
	 * The queue is cycled and any expired campaign is removed.
	 * Returns true if we can find an unexpired campaign, false otherwise.
	 */	
	private void removeExpiredCampaigns(String partnerKey) {
		while (campaignDB.get(partnerKey) != null && !campaignDB.get(partnerKey).isEmpty()) {
			if (campaignDB.get(partnerKey).peek().getExpiration().isAfter(LocalDateTime.now())) {
				break;
			} else {
				campaignDB.get(partnerKey).poll();
			}
		}
	}
	
	/**
	 * Removes all expired campaigns from all partners.
	 */
	private void removeExpiredCampaigns() {
		for (String s : campaignDB.keySet()) {
			removeExpiredCampaigns(s);
		}
	}
	
}
